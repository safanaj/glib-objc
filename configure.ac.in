dnl configure.ac
dnl
dnl glib-objc - objective-c bindings for glib
dnl
dnl Copyright (c) 2008 Brian Tarricone <bjt23@cornell.edu>
dnl

dnl version info
m4_define([goc_verinfo], [0:0:0])
m4_define([goc_api_version], [2.0])
m4_define([goc_version_major], [0])
m4_define([goc_version_minor], [1])
m4_define([goc_version_micro], [0])
m4_define([goc_version_build], [@REVISION@])
m4_define([goc_version_tag], [git])
m4_define([goc_version], [goc_version_major().goc_version_minor().goc_version_micro()ifelse(goc_version_tag(), [git], [goc_version_tag()-goc_version_build()], [goc_version_tag()])])

dnl init autoconf
AC_INIT([glib-objc], [goc_version], [brian@tarricone.org])
AC_PREREQ([2.59])

dnl init automake
AM_INIT_AUTOMAKE([dist-bzip2])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE

dnl check for UNIX variants
AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl check for basic programs
AC_PROG_CC
AC_PROG_OBJC
AM_PROG_CC_C_O
AC_PROG_INSTALL
AC_PROG_LIBTOOL

dnl check for standard header files
AC_HEADER_STDC
AC_CHECK_HEADERS([objc/objc-api.h objc/objc-runtime.h])

dnl version information
GOC_VERSION=goc_version
GOC_VERINFO=goc_verinfo
GOC_API_VERSION=goc_api_version
AC_SUBST(GO_VERSION)
AC_SUBST(GOC_VERINFO)
AC_SUBST(GOC_API_VERSION)

dnl required

#
# BT_CHECK_PACKAGE(VAR, MODULE, MIN_VERSION, [WEBSITE])
#
AC_DEFUN([BT_CHECK_PACKAGE],
[
    PKG_CHECK_MODULES([$1], [$2 >= $3], ,
    [
        echo '***'" $2 version $3 is required."
        if test "x$4" != "x"; then
            echo '***'" You can download it from $4"
        fi
        exit 1
    ])
    AC_MSG_CHECKING([$1_CFLAGS])
    AC_MSG_RESULT([$$1_CFLAGS])
    AC_MSG_CHECKING([$1_LIBS])
    AC_MSG_RESULT([$$1_LIBS])
])

BT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.12.0], [http://gtk.org/])
BT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [2.12.0], [http://gtk.org/])
BT_CHECK_PACKAGE([LIBFFI], [libffi], [3.0.0], [http://sourceware.org/libffi])

dnl figure out some semi-custom types

# BT_CHECK_OBJC_SIG(VAR, TYPE_MACRO, FRIENDLY_NAME)
AC_DEFUN([BT_CHECK_OBJC_SIG],
[
    AC_LANG_PUSH([Objective C])

    AC_MSG_CHECKING([the type signature of $3])
    AC_RUN_IFELSE(
    [AC_LANG_PROGRAM(
      [
        #include <stdio.h>
        #if defined(HAVE_OBJC_OBJC_RUNTIME_H)
        # include <objc/objc-runtime.h>
        #elif defined(HAVE_OBJC_OBJC_API_H)
        # include <objc/objc-api.h>
        #endif
      ],
      [
        FILE *fp = fopen("bt-conftest.out", "w");
        if(!fp)
            return 1;
        fprintf(fp, "%c\n", $2);
        fclose(fp);
      ])
    ], ,
    [
        AC_MSG_RESULT([failed])
        echo <<__EOERR
*** Failed to figure out the type signature of $3.  Your Objective C runtime
*** may not be supported.
__EOERR
        rm -f bt-conftest.out
        exit 1
    ])

    AC_LANG_POP()

    val=`cat bt-conftest.out`
    rm -f bt-conftest.out
    if test -z "$val"; then
        AC_MSG_RESULT([failed])
        echo <<__EOERR
*** Type signature of $3 appears to be empty.  Your Objective C runtime may
*** not be supported.
__EOERR
        exit 1
    fi

    AC_MSG_RESULT([$val])
    $1="$val"
])

BT_CHECK_OBJC_SIG([GOC_ARGTYPE_BOOL], [_C_BOOL], [BOOL])
BT_CHECK_OBJC_SIG([GOC_ARGTYPE_FLAGS], [_C_BFLD], [bitfields/flags])
# this next one shouldn't be hard-coded.  instead should make sure there are
# no conflicts with the system signatures
AC_MSG_CHECKING([the type signature of enums])
GOC_ARGTYPE_ENUM='e'
AC_MSG_RESULT([$GOC_ARGTYPE_ENUM])

dnl figure out if we can use our own constant string class
AC_MSG_CHECKING([if $CC supports -fconstant-string-class])
saved_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -fconstant-string-class=TestConstantString"
AC_LANG_PUSH([Objective C])
AC_RUN_IFELSE(
[AC_LANG_PROGRAM(
  [
    #import <objc/Object.h>

    @interface TestConstantString : Object
    {
        const char *c_string;
        unsigned int length;
    }
    @end
  ],
  [
    TestConstantString *conststr = @"this is a test";
  ])],
  [
    GOC_CONSTANT_STRING_CLASS=GOCConstantString
    GOC_CONSTANT_STRING_PCFILE_CFLAGS="-fconstant-string-class=$GOC_CONSTANT_STRING_CLASS"
    AC_MSG_RESULT([yes])
  ],
  [
    GOC_CONSTANT_STRING_CLASS=NXConstantString
    GOC_CONSTANT_STRING_CPPFLAGS="-DGOCConstantString=NXConstantString"
    AC_MSG_RESULT([no])
  ])
CPPFLAGS="$saved_CPPFLAGS $GOC_CONSTANT_STRING_CPPFLAGS"
AC_SUBST(GOC_CONSTANT_STRING_PCFILE_CFLAGS)
AC_SUBST(GOC_CONSTANT_STRING_CLASS)

dnl check for debugging support
AC_ARG_ENABLE([debug],
              [AC_HELP_STRING([--enable-debug=[full|yes|no]],
                              [Build with debugging support])
               AC_HELP_STRING([--disable-debug],
                              [Include no debugging support (default)])],
              [], [enable_debug=no])
AC_MSG_CHECKING([whether to build with debugging support])
if test "x$enable_debug" != "xno"; then
    AC_DEFINE([DEBUG], [1], [Define if debugging support is enabled])
    if test "x$GCC" = "xyes"; then
        if test "x$enable_debug" = "xfull"; then
            DEBUG_CFLAGS="-Wall -Wno-deprecated-declarations -g3 -Werror -fno-strict-aliasing"
        else
            DEBUG_CFLAGS="-Wall -g"
        fi
    fi
    DEBUG_CFLAGS="$DEBUG_CFLAGS -DG_DISABLE_DEPRECATED"
    
    CFLAGS="$CFLAGS $DEBUG_CFLAGS"
    OBJCFLAGS="$OBJCFLAGS $DEBUG_CFLAGS"
    CXXFLAGS="$CXXFLAGS $DEBUG_CFLAGS"
fi
AC_MSG_RESULT([$enable_debug])

AC_CONFIG_COMMANDS([glib-objc-config.h],
[
    outfile=glib-objc-config.h-tmp
    cat > $outfile <<__EOF
/*
 * glib-objc-config.h
 *
 * This is a generated file.  Please modifiy 'configure.ac.in'.
 */

#ifndef __GLIB_OBJC_CONFIG_H__
#define __GLIB_OBJC_CONFIG_H__

#define __GOC_ARGTYPE_BOOL         "$argtype_bool"
#define __GOC_ARGTYPE_FLAGS        "$argtype_flags"
#define __GOC_ARGTYPE_ENUM         "$argtype_enum"

#define GOC_CONSTANT_STRING_CLASS  $const_str_class

#endif  /* __GLIB_OBJC_CONFIG_H__ */
__EOF
    if cmp -s $outfile glib-objc-config.h; then
        AC_MSG_NOTICE([glib-objc-config.h is unchanged])
        rm -f $outfile
    else
        mv $outfile glib-objc-config.h
    fi
],
[
    argtype_bool=$GOC_ARGTYPE_BOOL
    argtype_flags=$GOC_ARGTYPE_FLAGS
    argtype_enum=$GOC_ARGTYPE_ENUM
    const_str_class=$GOC_CONSTANT_STRING_CLASS
])

AC_OUTPUT([
Makefile
common/Makefile
glib-objc/Makefile
glib-objc/glib-objc-2.0.pc
gobject-objc/Makefile
gobject-objc/gobject-objc-2.0.pc
tests/Makefile
])
